import discord
from discord.ext import commands
import logging
from datetime import datetime, timedelta
from utils import create_embed, format_number, get_house_emoji

logger = logging.getLogger(__name__)

class LoreEconomicSystem:
    def __init__(self, database):
        self.db = database
        
        # Game of Thrones kitaplarƒ±na g√∂re ger√ßek hane zenginlikleri
        self.lore_house_wealth = {
            # MEGA ZENGIN HANELER
            "Lannister": {
                "gold": 2500000,  # Casterly Rock altƒ±n madenleri
                "income_sources": [
                    {"name": "Casterly Rock Altƒ±n Madenleri", "type": "mining", "income": 5000, "description": "En zengin altƒ±n madenleri"},
                    {"name": "Lannisport Ticaret", "type": "trade", "income": 3000, "description": "B√ºy√ºk liman kenti"},
                    {"name": "Westerlands Vergileri", "type": "tax", "income": 2000, "description": "B√∂lge vergi toplama"}
                ],
                "population": 150000,
                "soldiers": 60000
            },
            "Tyrell": {
                "gold": 1800000,  # Reach'in zenginliƒüi
                "income_sources": [
                    {"name": "Highgarden Tarƒ±m", "type": "agriculture", "income": 4000, "description": "En verimli topraklar"},
                    {"name": "Oldtown Ticaret", "type": "trade", "income": 2500, "description": "Citadel ve b√ºy√ºk liman"},
                    {"name": "Reach ≈ûarap √úretimi", "type": "luxury", "income": 1500, "description": "En iyi ≈üaraplar"}
                ],
                "population": 200000,
                "soldiers": 100000
            },
            
            # √á√úNK√ú HANELER  
            "Stark": {
                "gold": 800000,  # Kuzey hanesi, zengin deƒüil ama g√º√ßl√º
                "income_sources": [
                    {"name": "Winterfell Vergileri", "type": "tax", "income": 1500, "description": "Kuzey lordlarƒ±ndan vergi"},
                    {"name": "White Harbor Ticaret", "type": "trade", "income": 1200, "description": "Kuzey'in tek b√ºy√ºk limanƒ±"},
                    {"name": "Orman √úr√ºnleri", "type": "resources", "income": 800, "description": "Kereste ve av"}
                ],
                "population": 120000,
                "soldiers": 45000
            },
            "Baratheon": {
                "gold": 600000,  # Robert'ƒ±n harcamalarƒ± y√ºz√ºnden azalmƒ±≈ü
                "income_sources": [
                    {"name": "Storm's End Vergileri", "type": "tax", "income": 1000, "description": "Stormlands vergileri"},
                    {"name": "Shipbreaker Bay Balƒ±k√ßƒ±lƒ±k", "type": "fishing", "income": 600, "description": "Deniz √ºr√ºnleri"},
                    {"name": "Kingswood Avcƒ±lƒ±k", "type": "hunting", "income": 400, "description": "Av ve kereste"}
                ],
                "population": 80000,
                "soldiers": 30000
            },
            
            # ORTA GELƒ∞RLƒ∞ HANELER
            "Arryn": {
                "gold": 700000,  # Vale'in zenginliƒüi
                "income_sources": [
                    {"name": "Eyrie Vergileri", "type": "tax", "income": 1200, "description": "Vale lordlarƒ±ndan vergi"},
                    {"name": "Gulltown Ticaret", "type": "trade", "income": 800, "description": "Vale'in liman kenti"},
                    {"name": "Daƒü Madenleri", "type": "mining", "income": 500, "description": "Demir ve g√ºm√º≈ü"}
                ],
                "population": 90000,
                "soldiers": 35000
            },
            "Tully": {
                "gold": 500000,  # Riverlands orta d√ºzey
                "income_sources": [
                    {"name": "Riverrun Vergileri", "type": "tax", "income": 800, "description": "Riverlands vergileri"},
                    {"name": "Nehir Ticareti", "type": "trade", "income": 600, "description": "Trident nehri ticareti"},
                    {"name": "Balƒ±k√ßƒ±lƒ±k", "type": "fishing", "income": 400, "description": "Tatlƒ± su balƒ±klarƒ±"}
                ],
                "population": 70000,
                "soldiers": 25000
            },
            "Martell": {
                "gold": 900000,  # Dorne'un zenginliƒüi
                "income_sources": [
                    {"name": "Sunspear Ticaret", "type": "trade", "income": 1500, "description": "Essos ile ticaret"},
                    {"name": "Dornish ≈ûarap & Baharat", "type": "luxury", "income": 1000, "description": "L√ºks √ºr√ºnler"},
                    {"name": "√á√∂l Oazlarƒ±", "type": "agriculture", "income": 500, "description": "Nadir mahsuller"}
                ],
                "population": 100000,
                "soldiers": 40000
            },
            
            # FAKIR/ZAYIF HANELER
            "Greyjoy": {
                "gold": 300000,  # Iron Islands fakir
                "income_sources": [
                    {"name": "Pyke Vergileri", "type": "tax", "income": 400, "description": "Iron Islands vergileri"},
                    {"name": "Balƒ±k√ßƒ±lƒ±k & Denizcilik", "type": "fishing", "income": 600, "description": "Deniz √ºr√ºnleri"},
                    {"name": "Yaƒümalama", "type": "raiding", "income": 800, "description": "Korsanlƒ±k geliri"}
                ],
                "population": 50000,
                "soldiers": 20000
            },
            "Bolton": {
                "gold": 200000,  # K√º√ß√ºk kuzey hanesi
                "income_sources": [
                    {"name": "Dreadfort Vergileri", "type": "tax", "income": 300, "description": "K√º√ß√ºk lordluk"},
                    {"name": "Deri ƒ∞≈ü√ßiliƒüi", "type": "crafting", "income": 200, "description": "√ñzel deri i≈üleri"},
                    {"name": "Korku Vergisi", "type": "extortion", "income": 400, "description": "Zorla toplanan vergi"}
                ],
                "population": 30000,
                "soldiers": 15000
            },
            "Mormont": {
                "gold": 100000,  # Bear Island √ßok fakir
                "income_sources": [
                    {"name": "Bear Island Balƒ±k√ßƒ±lƒ±k", "type": "fishing", "income": 200, "description": "K√º√ß√ºk ada balƒ±k√ßƒ±lƒ±ƒüƒ±"},
                    {"name": "Ayƒ± Derisi Ticareti", "type": "hunting", "income": 150, "description": "Ayƒ± avƒ±"},
                    {"name": "Night's Watch Baƒüƒ±≈üƒ±", "type": "donation", "income": 100, "description": "Gece N√∂beti desteƒüi"}
                ],
                "population": 10000,
                "soldiers": 5000
            }
        }
        
        # Kaynak t√ºrleri ve √∂zellikleri
        self.resource_types = {
            "gold": {"name": "Altƒ±n", "emoji": "üí∞", "base_value": 1},
            "food": {"name": "Yiyecek", "emoji": "üåæ", "base_value": 2},
            "stone": {"name": "Ta≈ü", "emoji": "üóø", "base_value": 5},
            "wood": {"name": "Kereste", "emoji": "ü™µ", "base_value": 3},
            "iron": {"name": "Demir", "emoji": "‚öîÔ∏è", "base_value": 8},
            "cloth": {"name": "Kuma≈ü", "emoji": "üßµ", "base_value": 4},
            "wine": {"name": "≈ûarap", "emoji": "üç∑", "base_value": 12},
            "spices": {"name": "Baharat", "emoji": "üå∂Ô∏è", "base_value": 15}
        }
        
        self.setup_lore_tables()
    
    def setup_lore_tables(self):
        """Create lore-based economic tables"""
        try:
            # Kaynak √ºretim tesisleri
            self.db.c.execute('''
            CREATE TABLE IF NOT EXISTS resource_facilities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                house_id INTEGER NOT NULL,
                facility_name TEXT NOT NULL,
                facility_type TEXT NOT NULL,
                resource_type TEXT NOT NULL,
                production_rate INTEGER NOT NULL,
                maintenance_cost INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (house_id) REFERENCES alliances (id)
            )
            ''')
            
            # Kaynak depolarƒ±
            self.db.c.execute('''
            CREATE TABLE IF NOT EXISTS resource_storage (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                house_id INTEGER NOT NULL,
                resource_type TEXT NOT NULL,
                quantity INTEGER DEFAULT 0,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(house_id, resource_type),
                FOREIGN KEY (house_id) REFERENCES alliances (id)
            )
            ''')
            
            self.db.conn.commit()
            logger.info("Lore economic tables created successfully")
        except Exception as e:
            logger.error(f"Error creating lore economic tables: {e}")
    
    def setup_lore_commands(self, bot):
        """Setup lore-based economic commands"""
        
        @bot.command(name='ger√ßek_ekonomi_kur')
        async def setup_lore_economy(ctx):
            """Kitaplardaki ger√ßek verilere g√∂re ekonomiyi kur"""
            try:
                embed = create_embed(
                    "‚öôÔ∏è GER√áEK√áƒ∞ EKONOMƒ∞ KURULUYOR",
                    "Game of Thrones kitaplarƒ±ndaki ger√ßek veriler uygulanƒ±yor...",
                    discord.Color.gold()
                )
                
                setup_msg = await ctx.send(embed=embed)
                
                updated_houses = 0
                created_facilities = 0
                
                # T√ºm haneleri g√ºncelle
                for house_name, house_data in self.lore_house_wealth.items():
                    # Haneyi bul
                    self.db.c.execute('SELECT id FROM alliances WHERE name = ?', (house_name,))
                    result = self.db.c.fetchone()
                    
                    if result:
                        house_id = result[0]
                        
                        # Altƒ±n miktarƒ±nƒ± g√ºncelle
                        self.db.c.execute('''
                        UPDATE alliances SET gold = ?, soldiers = ?
                        WHERE id = ?
                        ''', (house_data['gold'], house_data['soldiers'], house_id))
                        
                        # Gelir kaynaklarƒ±nƒ± ekle
                        for source in house_data['income_sources']:
                            self.db.c.execute('''
                            INSERT OR REPLACE INTO resource_facilities 
                            (house_id, facility_name, facility_type, resource_type, production_rate)
                            VALUES (?, ?, ?, 'gold', ?)
                            ''', (house_id, source['name'], source['type'], source['income']))
                            created_facilities += 1
                        
                        # Temel kaynak depolarƒ± olu≈ütur
                        for resource_type in self.resource_types.keys():
                            base_amount = house_data['gold'] // 1000  # Altƒ±na g√∂re temel kaynak
                            self.db.c.execute('''
                            INSERT OR REPLACE INTO resource_storage (house_id, resource_type, quantity)
                            VALUES (?, ?, ?)
                            ''', (house_id, resource_type, base_amount))
                        
                        updated_houses += 1
                
                self.db.conn.commit()
                
                # Sonu√ß g√∂ster
                embed = create_embed(
                    "‚úÖ GER√áEK√áƒ∞ EKONOMƒ∞ KURULDU!",
                    "Game of Thrones kitaplarƒ±ndaki ger√ßek veriler ba≈üarƒ±yla uygulandƒ±",
                    discord.Color.green()
                )
                
                embed.add_field(name="üè† G√ºncellenen Haneler", value=updated_houses, inline=True)
                embed.add_field(name="üè≠ Olu≈üturulan Tesisler", value=created_facilities, inline=True)
                embed.add_field(name="üìä Kaynak T√ºrleri", value=len(self.resource_types), inline=True)
                
                # En zengin haneleri g√∂ster
                wealth_info = ""
                sorted_houses = sorted(self.lore_house_wealth.items(), key=lambda x: x[1]['gold'], reverse=True)[:5]
                for house_name, data in sorted_houses:
                    wealth_info += f"{get_house_emoji(house_name)} **{house_name}**: {format_number(data['gold'])} altƒ±n\n"
                
                embed.add_field(name="üí∞ En Zengin Haneler", value=wealth_info, inline=False)
                
                await setup_msg.edit(embed=embed)
                
            except Exception as e:
                logger.error(f"Setup lore economy error: {e}")
                embed = create_embed("‚ùå Hata", f"Ekonomi kurulum hatasƒ±: {str(e)}", discord.Color.red())
                await ctx.send(embed=embed)
        
        @bot.command(name='hane_ekonomi')
        async def house_economy(ctx):
            """Hanenizdeki ekonomik durumu ve tesisleri g√∂r√ºnt√ºle"""
            try:
                user_id = ctx.author.id
                alliance = self.db.get_user_alliance(user_id)
                
                if not alliance:
                    embed = create_embed("‚ùå Hata", "Ekonomi durumu g√∂rmek i√ßin bir haneye ait olmalƒ±sƒ±n!", discord.Color.red())
                    await ctx.send(embed=embed)
                    return
                
                alliance_id = alliance[0]
                alliance_data = self.db.get_alliance_by_id(alliance_id)
                house_name = alliance_data[1]
                
                embed = create_embed(
                    f"{get_house_emoji(house_name)} {house_name.upper()} EKONOMƒ∞Sƒ∞",
                    "Detaylƒ± ekonomik durum ve √ºretim tesisleri",
                    discord.Color.gold()
                )
                
                # Temel bilgiler
                embed.add_field(name="üí∞ Hazine", value=f"{format_number(alliance_data[3])} altƒ±n", inline=True)
                embed.add_field(name="‚öîÔ∏è Ordu", value=f"{format_number(alliance_data[4])} asker", inline=True)
                embed.add_field(name="‚ö° G√º√ß", value=f"{format_number(alliance_data[5])} puan", inline=True)
                
                # √úretim tesisleri
                self.db.c.execute('''
                SELECT facility_name, facility_type, resource_type, production_rate, level
                FROM resource_facilities WHERE house_id = ?
                ORDER BY production_rate DESC
                ''', (alliance_id,))
                
                facilities = self.db.c.fetchall()
                
                if facilities:
                    facilities_text = ""
                    total_income = 0
                    for facility_name, facility_type, resource_type, production_rate, level in facilities:
                        emoji = "üè≠" if facility_type == "mining" else "üåæ" if facility_type == "agriculture" else "üö¢" if facility_type == "trade" else "üèõÔ∏è"
                        facilities_text += f"{emoji} **{facility_name}** (Lv.{level})\n"
                        facilities_text += f"   ‚îî {format_number(production_rate)} altƒ±n/saat\n\n"
                        total_income += production_rate
                    
                    embed.add_field(name="üè≠ √úretim Tesisleri", value=facilities_text[:1000], inline=False)
                    embed.add_field(name="üìà Toplam Gelir", value=f"{format_number(total_income)} altƒ±n/saat", inline=True)
                
                # Kaynak depolarƒ±
                self.db.c.execute('''
                SELECT resource_type, quantity FROM resource_storage 
                WHERE house_id = ? AND quantity > 0
                ORDER BY quantity DESC
                ''', (alliance_id,))
                
                resources = self.db.c.fetchall()
                
                if resources:
                    resources_text = ""
                    for resource_type, quantity in resources[:6]:  # ƒ∞lk 6 kaynak
                        if resource_type in self.resource_types:
                            emoji = self.resource_types[resource_type]["emoji"]
                            name = self.resource_types[resource_type]["name"]
                            resources_text += f"{emoji} **{name}**: {format_number(quantity)}\n"
                    
                    embed.add_field(name="üì¶ Kaynak Depolarƒ±", value=resources_text, inline=True)
                
                # Kitaptaki bilgiler varsa ekle
                if house_name in self.lore_house_wealth:
                    lore_data = self.lore_house_wealth[house_name]
                    embed.add_field(name="üìö Kitaptaki Veriler", 
                                  value=f"üë• N√ºfus: {format_number(lore_data['population'])}\n"
                                        f"‚öîÔ∏è Max Ordu: {format_number(lore_data['soldiers'])}\n"
                                        f"üí∞ Orijinal Servet: {format_number(lore_data['gold'])}", 
                                  inline=True)
                
                await ctx.send(embed=embed)
                
            except Exception as e:
                logger.error(f"House economy error: {e}")
                embed = create_embed("‚ùå Hata", f"Ekonomi g√∂r√ºnt√ºleme hatasƒ±: {str(e)}", discord.Color.red())
                await ctx.send(embed=embed)
        
        @bot.command(name='tesis_y√ºkselt')
        async def upgrade_facility(ctx, *, facility_name: str):
            """√úretim tesisini y√ºkselt"""
            try:
                user_id = ctx.author.id
                alliance = self.db.get_user_alliance(user_id)
                
                if not alliance:
                    embed = create_embed("‚ùå Hata", "Tesis y√ºkseltmek i√ßin bir haneye ait olmalƒ±sƒ±n!", discord.Color.red())
                    await ctx.send(embed=embed)
                    return
                
                alliance_id = alliance[0]
                alliance_data = self.db.get_alliance_by_id(alliance_id)
                
                # Tesisi bul
                self.db.c.execute('''
                SELECT id, facility_name, level, production_rate FROM resource_facilities
                WHERE house_id = ? AND facility_name LIKE ?
                ''', (alliance_id, f"%{facility_name}%"))
                
                facility = self.db.c.fetchone()
                
                if not facility:
                    embed = create_embed("‚ùå Hata", f"'{facility_name}' adƒ±nda tesis bulunamadƒ±!", discord.Color.red())
                    await ctx.send(embed=embed)
                    return
                
                facility_id, full_name, current_level, current_production = facility
                
                # Y√ºkseltme maliyeti hesapla
                upgrade_cost = current_level * 10000  # Her seviye 10k daha pahalƒ±
                new_level = current_level + 1
                new_production = int(current_production * 1.5)  # %50 artƒ±≈ü
                
                if alliance_data[3] < upgrade_cost:  # gold check
                    embed = create_embed("‚ùå Yetersiz Altƒ±n", 
                                       f"Y√ºkseltme i√ßin {format_number(upgrade_cost)} altƒ±n gerekli!", 
                                       discord.Color.red())
                    await ctx.send(embed=embed)
                    return
                
                # Y√ºkseltmeyi yap
                self.db.update_alliance_resources(alliance_id, -upgrade_cost, 0)
                
                self.db.c.execute('''
                UPDATE resource_facilities 
                SET level = ?, production_rate = ?
                WHERE id = ?
                ''', (new_level, new_production, facility_id))
                
                self.db.conn.commit()
                
                embed = create_embed(
                    "‚¨ÜÔ∏è TESƒ∞S Y√úKSELTƒ∞LDƒ∞!",
                    f"**{full_name}** ba≈üarƒ±yla y√ºkseltildi!",
                    discord.Color.green()
                )
                
                embed.add_field(name="üìä Eski Seviye", value=f"Lv.{current_level}", inline=True)
                embed.add_field(name="üìà Yeni Seviye", value=f"Lv.{new_level}", inline=True)
                embed.add_field(name="üí∞ Maliyet", value=f"{format_number(upgrade_cost)} altƒ±n", inline=True)
                
                embed.add_field(name="‚ö° Eski √úretim", value=f"{format_number(current_production)} altƒ±n/saat", inline=True)
                embed.add_field(name="üöÄ Yeni √úretim", value=f"{format_number(new_production)} altƒ±n/saat", inline=True)
                embed.add_field(name="üìà Artƒ±≈ü", value=f"+{format_number(new_production - current_production)} altƒ±n/saat", inline=True)
                
                await ctx.send(embed=embed)
                
            except Exception as e:
                logger.error(f"Upgrade facility error: {e}")
                embed = create_embed("‚ùå Hata", f"Tesis y√ºkseltme hatasƒ±: {str(e)}", discord.Color.red())
                await ctx.send(embed=embed)
        
        @bot.command(name='zenginlik_sƒ±ralamasƒ±')
        async def wealth_ranking(ctx):
            """Kitaplara g√∂re hanelerin zenginlik sƒ±ralamasƒ±"""
            try:
                embed = create_embed(
                    "üëë WESTEROS ZENGƒ∞NLƒ∞K SIRALAMASI",
                    "Game of Thrones kitaplarƒ±ndaki ger√ßek verilere g√∂re",
                    discord.Color.gold()
                )
                
                # Kitap verilerine g√∂re sƒ±ralama
                sorted_houses = sorted(self.lore_house_wealth.items(), key=lambda x: x[1]['gold'], reverse=True)
                
                ranking_text = ""
                for i, (house_name, data) in enumerate(sorted_houses, 1):
                    if i == 1:
                        ranking_text += f"üëë **{house_name}**: {format_number(data['gold'])} altƒ±n\n"
                        ranking_text += f"    ‚îî {len(data['income_sources'])} gelir kaynaƒüƒ±\n\n"
                    elif i == 2:
                        ranking_text += f"ü•à **{house_name}**: {format_number(data['gold'])} altƒ±n\n"
                        ranking_text += f"    ‚îî {len(data['income_sources'])} gelir kaynaƒüƒ±\n\n"
                    elif i == 3:
                        ranking_text += f"ü•â **{house_name}**: {format_number(data['gold'])} altƒ±n\n"
                        ranking_text += f"    ‚îî {len(data['income_sources'])} gelir kaynaƒüƒ±\n\n"
                    else:
                        ranking_text += f"{i}. **{house_name}**: {format_number(data['gold'])} altƒ±n\n"
                
                embed.add_field(name="üí∞ Zenginlik Sƒ±ralamasƒ±", value=ranking_text, inline=False)
                
                # En zengin ve en fakir arasƒ±ndaki fark
                richest = sorted_houses[0][1]['gold']
                poorest = sorted_houses[-1][1]['gold']
                difference = richest / poorest
                
                embed.add_field(name="üìä ƒ∞statistikler", 
                              value=f"üíé En Zengin: {format_number(richest)} altƒ±n\n"
                                    f"üí∏ En Fakir: {format_number(poorest)} altƒ±n\n"
                                    f"‚öñÔ∏è Fark Oranƒ±: {difference:.1f}x", 
                              inline=True)
                
                embed.add_field(name="üìö Kaynak", 
                              value="A Song of Ice and Fire kitap serisi\nGeorge R.R. Martin", 
                              inline=True)
                
                await ctx.send(embed=embed)
                
            except Exception as e:
                logger.error(f"Wealth ranking error: {e}")
                embed = create_embed("‚ùå Hata", f"Sƒ±ralama hatasƒ±: {str(e)}", discord.Color.red())
                await ctx.send(embed=embed)

logger.info("Lore economic system initialized successfully")